version: "3"

includes:
  ci: ./scripts/ci/ci.Taskfile.yaml

tasks:
  isolate:
    desc: Drop into a isolated environment
    cmds:
      - ./scripts/isolate.sh

  build:
    desc: Build all derivations within `default.nix`
    cmds:
      - nix-build

  clean:
    desc: remove all artifacts from `build`
    cmds:
      - rm -rf result*

  test:
    desc: Build and remove all build artifacts. Test whether all `nix` code is well-format and 'compilable'
    cmds:
      - task: build
      - task: clean

  fmt:
    desc: Run all formatting supported.
    summary: |
      Runs all formatting supported.

      1. Runs fmt:md, which formats all Markdown using prettier
      2. Runs fmt:yaml, which formats all YAML using prettier
      3. Runs fmt:nix, which formats all Nix files with nixpkgs-fmt
    cmds:
      - task: fmt:md
      - task: fmt:yaml
      - task: fmt:nix

  fmt:md:
    desc: Formats Markdown with prettier
    cmds:
      - prettier -w "**/*.MD"
      - prettier -w "**/*.md"

  fmt:yaml:
    desc: Formats YAML with prettier
    cmds:
      - prettier -w "**/*.yaml"
      - prettier -w "**/*.yml"

  fmt:nix:
    desc: Formats Nix files
    cmds:
      - nixpkgs-fmt .

  get:go:sha:
    desc: Calculate SHA of Go module using the GitHub information
    summary: |
      Calculate SHA of Go module using the GitHub information

      Usage:
      pls get:go:sha -- <nix-identifier> <path to nix file in golang>

      example:
      1. In default.nix
         { narwhal = import golang/narwhal/default.nix ... }

         command to run: pls get:go:sha -- narwhal narwhal/default

      2. In default.nix
         { narwhal_0_3_11 = import ./golang/narwhal/0.3.11.nix ...}

         command to run: pls get:go:sha -- narwhal_0_3_11 narwhal/0.3.11
    cmds:
      - ./scripts/go-sha.sh {{.CLI_ARGS}}

  get:go:vendor:sha:
    desc: Calculate SHA of Go module's vendor (depedency/go.sum)'s packages
    summary: |
      Calculate SHA of Go module using the GitHub information

      Usage:
      pls get:go:vendor:sha -- <nix-identifier> <path to nix file in golang>

      example:
      1. In default.nix
         { narwhal = import golang/narwhal/default.nix ... }

         command to run: pls get:go:vendor:sha -- narwhal narwhal/default

      2. In default.nix
         { narwhal_0_3_11 = import ./golang/narwhal/0.3.11.nix ...}

         command to run: pls get:go:vendor:sha -- narwhal_0_3_11 narwhal/0.3.11
    cmds:
      - ./scripts/golang-vendor.sh {{.CLI_ARGS}}

  gen:node:
    desc: Generates Node package Nix files as CLI binaries
    cmds:
      - node2nix -i ./node/node-packages.json -e ./node/node-env.nix -o ./node/node-packages.nix -c ./node/composition.nix
      - task: fmt:nix

  cfg:scripts:
    desc: Make scripts executable
    cmds:
      - chmod -R +x ./scripts
